""" Library of all the prompts used by the app. """
from langchain.prompts import PromptTemplate

BIO_EXTRACTION_PROMPT_TMPL = PromptTemplate.from_template(
    "Given the following text, extract the information of all the people mentioned in the text.\n"
    "\n"
    "\n"
    "Text: {text}\n"
    "\n"
    "\n"
    "Extract in the following json schema format:\n"
    "\n"
    "\n"
    "```json\n"
    "{{\n"
    "  \"people\": [\n"
    "    {{\n"
    "      \"name\": \"John Doe\",\n"
    "      \"title\": \"CEO\",\n"
    "      \"bio\": \"John Doe is the CEO of ABC. He has been working in the field of AI for 20 years\",\n"
    "\"interests\": \"John J. Gilluly III has a diverse range of areas of interest in the legal sector. These include "
    "Corporate law, Emerging Growth and Venture Capital, Energy and Natural Resources, Equity Capital Markets, "
    "Financial Services, Healthcare, Life Sciences, Mergers and Acquisitions, Private Equity, and Technology. "
    "Additionally, he is also invested in Environmental, Social, and Governance (ESG) matters.\",\n"
    "      \"contact\": \"+1-908-123-1234\",\n"
    "      \"email\": \"a@a.com\"\n"
    "    }},\n"
    "    {{\n"
    "      \"name\": \"Jane Doe\",\n"
    "      \"title\": \"CTO\",\n"
    "      \"bio\": \"Jane Doe is the CTO of ABC. She has been working in the field of AI for 20 years.\"\n"
    "      \"contact\": \"+1-908-123-1234\",\n"
    "\"interests\": \"John J. Gilluly III has a diverse range of areas of interest in the legal sector. These include "
    "Corporate law, Emerging Growth and Venture Capital, Energy and Natural Resources, Equity Capital Markets, "
    "Financial Services, Healthcare, Life Sciences, Mergers and Acquisitions, Private Equity, and Technology. "
    "Additionally, he is also invested in Environmental, Social, and Governance (ESG) matters.\",\n"
    "      \"email\": \"b@b.com\"\n"
    "    }}\n"
    "  ]\n"
    "}}\n"
    "```\n"
    "\n"
)

REDDIT_PROSPECT_CLASSIFIER_PROMPT_TMPL = PromptTemplate.from_template(
    "Assume you are an expert lead generator and are deriving leads from a Reddit thread.\n"
    "Given the following text, extract the set of all possible leads from the text:\n"
    "\n"
    "\n"
    "Text: {text}\n"
    "\n"
    "\n"
    "\n"
    "\n"    
    "Step I: Each user should be classified into one of the following categories (based on their conversation):\n"
    "\n"
    "\n"
    "1. Student: Someone who is asking questions\n"
    "2. Instructor: \n"
    "\n"
    "Step II: Create a short bio for each user based on their conversation.\n"
    "\n"
    "\n"      
    " \"name\": \"What is their Reddit Handle\",\n"
    " \"category\": \"Whether they are a student or an instructor lead\",\n"    
    " \"bio\": \"Based on the discussion they have had, write a short bio for them\",\n"
    "}}\n"
)

REDDIT_PROSPECT_JSON_EXTRACTOR_TMPL = PromptTemplate.from_template(
    "Translate the text into a json schema format:\n"
    "\n"
    "\n"
    "Text: {text}\n"
    "\n"
    "\n"
    "Here is a sample schema:\n"
    "```json\n"
    "{{\n"
    "  \"people\": [\n"
    "    {{\n"
    "      \"name\": \"John Doe\",\n"
    "      \"category\": \"Student\",\n"
    "      \"bio\": \"John Doe is interested in learning about AI. He is a sophomore at ABC.\"\n"
    "    }},\n"
    "}}\n"
    "```\n"
    "\n"
    "Do not emit any other information other than the above schema.\n"
)

PROSPECT_ANSWER_PROMPT_TMPL = PromptTemplate.from_template(
    "Given the following set of prospects, answer the following questions:\n"
    "\n"
    "\n"
    "Prospects: {prospects}\n"
    "\n"
    "\n"
    "Conversation thus far: {conversation}\n"
    "\n"
    "\n"
    "Question: {question}\n"
    "\n"
    "\n"
    "Generate the answer as a collection of bullets and organize them in paragraphs (if need be).\n"
    "Example:\n"
    "\n"
    "\n"
    "Do not make stuff. Answer the question only from the information provided in the prospects.\n"
    "If you cannot answer the question, then say so.\n"
    "Be accurate. Do not make stuff up.\n"
    "For every chunk that is relevant, provide the URL that the chunk is derived from.\n"
    "Generate this as a Markdown with the URL tied to the name of the prospect.\n"
    "An example is shown below:\n"
    "\n"
    "[John Doe](https://www.reddit.com/user/johndoe)\n"
    "\n"
    "\n"
)

SUMMARY_GENERATOR_PROMPT_TMP = PromptTemplate.from_template(
    "Given the following text and the title, generate a summary of the text.\n"
    "\n"
    "\n"
    "Text: {text}\n"
    "\n"
    "\n"
)
